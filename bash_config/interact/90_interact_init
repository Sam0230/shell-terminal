# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# disable shopt for busybox shell
[ "$(sh --help | grep BusyBox)" != "" ] && shopt() { :; };

# enhanced command history, session & restoration support. useful with supported terminal emulators like Apple Terminal. Manual restoring is also supported.
# Currently only history, variables, functions, aliases, traps, completion and shell level restoration is supported. Traps restoration is still work-in-progress.

# disable Apple Terminal's built-in shell session support
touch "$HOME/.bash_sessions_disable"

__SHELL_SESSION_DIR="$HOME/.bash_sessions"
mkdir -p "$__SHELL_SESSION_DIR"
restoreSession() {
	env -i -- "$(which bash)" --noprofile --norc -l -c 'source "$1" 2>/dev/null; export __SHELL_SESSION_ID="$2"; exec -a "$3" "$4"' - "$__SHELL_SESSION_DIR/$1/env" "$1" "$(cat "$__SHELL_SESSION_DIR/$1/arg0")" "$(cat "$__SHELL_SESSION_DIR/$1/executable")"
}
alias printSessionId='printf "%s\n" "$__SHELL_SESSION_ID"'
__BASH_END_SHELL_SESSION() {
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new"; then
		cat "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new" >>"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history"
		if test "$HISTFILE"; then
			cat "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new" >>"$HISTFILE"
		fi
		rm "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new"
	fi
}
__BASH_SAVE_SHELL_SESSION() {
	mkdir -p "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID"
	if test "$__SHELL_SESSION_ID" != "$__SHELL_CURRENT_SESSION_ID" -a "$__SHELL_CURRENT_SESSION_ID"; then
		return
	fi
	history -a "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new"
	declare -p >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/env"
	declare -f >>"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/env"
	alias -p >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/aliases"
	complete -p >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/completion"
	trap -p >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/traps"
	alias -p >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/aliases"
	pwd >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/cwd"
}
__BASH_SAVE_SESSION_RM_CHILD() {
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/child" && test ! -e "$__SHELL_SESSION_DIR/"$(cat "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/child")"/sighup" ; then
		rm "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/child"
	fi
}
if test "$__SHELL_SESSION_ID"; then
	local __SHELL_SESSION_ID_BAK="$__SHELL_SESSION_ID"
	unset __SHELL_SESSION_ID
	__SHELL_SESSION_ID="$__SHELL_SESSION_ID_BAK"
	unset __SHELL_SESSION_ID_BAK
elif test "$TERMINAL_SESSION_ID"; then
	unset __SHELL_SESSION_ID
	__SHELL_SESSION_ID="$TERMINAL_SESSION_ID"
	unset TERMINAL_SESSION_ID
	TERMINAL_SESSION_ID="$__SHELL_SESSION_ID"
elif test "$TERM_SESSION_ID"; then
	unset __SHELL_SESSION_ID
	__SHELL_SESSION_ID="$TERM_SESSION_ID"
	unset TERM_SESSION_ID
	TERM_SESSION_ID="$__SHELL_SESSION_ID"
elif test "$SHELL_SESSION_ID"; then
	unset __SHELL_SESSION_ID
	__SHELL_SESSION_ID="$SHELL_SESSION_ID"
	unset SHELL_SESSION_ID
	SHELL_SESSION_ID="$__SHELL_SESSION_ID"
else
	__SHELL_SESSION_ID="$(uuidgen)"
fi
echo "Shell session Id: $__SHELL_SESSION_ID"
PROMPT_COMMAND="__BASH_SAVE_SHELL_SESSION${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
PROMPT_COMMAND="__BASH_SAVE_SESSION_RM_CHILD${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
trap '__BASH_SAVE_SHELL_SESSION; __BASH_END_SHELL_SESSION' exit
trap 'touch "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/sighup"' SIGHUP
if test -e "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/sighup"; then
	rm "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/sighup"
fi
if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID"; then
	IFS=$' \t\n'
	trap DEBUG
	trap EXIT
	trap RETURN
	for i in $(trap -l); do
		trap "$i" 2>/dev/null
	done
	complete -r
	IFS=$'\n'
	unalias $(compgen -a)
	alias __SHELL_SESSION_DIR="$__SHELL_SESSION_DIR"
	alias __SHELL_SESSION_ID="$__SHELL_SESSION_ID"
	unset $(compgen -v) $(compgen -A function) IFS 2>/dev/null
	IFS=$' \t\n'
	setenvcmd="$(alias -p)"
	alias alias="declare -g"
	eval "$setenvcmd"
	unset setenvcmd
	unalias alias __SHELL_SESSION_DIR __SHELL_SESSION_ID
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/env"; then
		alias declare='declare -g'
		source "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/env" 2>/dev/null
		unalias declare
	fi
	__BASH_HIST_LOADED=0
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/aliases"; then
		source "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/aliases" 2>/dev/null
	fi
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/completion"; then
		source "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/completion" 2>/dev/null
	fi
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/cwd"; then
		if ! cd "$(cat "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/cwd")" 2>/dev/null; then
			echo -e "\033[1;31mError: \033[m\033[1mCan not restore CWD: Original working directory not found or inaccessible\033[m"
			echo -e "\033[1;31mOriginal CWD: \033[m\033[1m$(cat "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/cwd")\033[m"
			cd "$(pwd)"
		fi
	fi
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/traps"; then
		source "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/traps" 2>/dev/null
	fi
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/child"; then
		__SHELL_SESSION_ID="$(tail -n 1 "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/child")" bash
	fi
	__BASH_SAVE_SHELL_SESSION
	declare -g ___BASHCFG_BREAK___=1
	return
fi
mkdir -p "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID"
if test "$__SHELL_PARENT_SESSION_ID"; then
	printf "%s" "$__SHELL_PARENT_SESSION_ID" >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/parent"
	if test -d "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID"; then
		printf "%s" "$0" "$__SHELL_SESSION_ID" >"$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/child"
	fi
	touch "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_parent" "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_parent_new"
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/history"; then
		cp "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/history" "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_parent"
	fi
	if test -e "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/history_new"; then
		cp "$__SHELL_SESSION_DIR/$__SHELL_PARENT_SESSION_ID/history_new" "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_parent_new"
	fi
fi
export __SHELL_CURRENT_PARENT_SESSION_ID="$__SHELL_PARENT_SESSION_ID"
export __SHELL_PARENT_SESSION_ID="$__SHELL_SESSION_ID"
__SHELL_CURRENT_SESSION_ID="$__SHELL_SESSION_ID"
lsof -p $$ | grep -Em 1 "$(id -nru)"'[ \t]+txt[ \t]+REG[ \t]' | sed -E 's/^([^ \t]+[ \t]+){8}//' >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/executable"
printf "%s" "$0" >"$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/arg0"
touch "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history" "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new"
__BASH_LOAD_HIST() {
	[ "$__BASH_HIST_LOADED" == 1 ] && return
	__BASH_HIST_LOADED=1
	history -r "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_parent"
	history -r "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_parent_new"
	history -r "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history"
	history -a /dev/null
	history -r "$__SHELL_SESSION_DIR/$__SHELL_SESSION_ID/history_new"
}
PROMPT_COMMAND="__BASH_LOAD_HIST${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
__BASH_SAVE_SHELL_SESSION

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE="$BASH_HISTORY_LENGTH"
HISTFILESIZE="$BASH_HISTORY_FILE_SIZE"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color) color_prompt=yes;;
	xterm-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
	else
	color_prompt=
	fi
fi

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
	PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	;;
*)
	;;
esac

# dircolors
dircolors() {
	echo "LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'"
	echo "export LS_COLORS"
}

# enable color support of ls and also add handy aliases
#if [ -x /usr/bin/dircolors ]; then
	#test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	if [ "$(uname -s)" == "Darwin" -a "$(which ls)" == "/bin/ls" ]; then
		alias ls='ls -G'
	else
		alias ls='ls --color=auto'
	fi
	#alias dir='dir --color=auto'
	#alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
#fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#	. ~/.bash_aliases
#fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#	. /etc/bash_completion
#fi

# Dummy trap (avoid internal traps being overwrited)
#WIPalias trap="__dumy_trap"
#WIP__dummy_trap() {
#WIP	if [ "$#" == "0" ]; then
#WIP	fi
#WIP	if [ "$#" == "1" ]; then
#WIP		if [ "$1" == "--help" ] || [[ "$i" != *" "* || ( " 0) EXIT $(trap -l) DEBUG RETURN " != *" $i "* && " 0) EXIT $(trap -l) DEBUG RETURN " != *" ($i "* ) ]]; then
#WIP			unalias trap
#WIP			trap "$@"
#WIP			alias trap="__dumy_trap"
#WIP		else
#WIP			:
#WIP		fi
#WIP	fi
#WIP	if [ "$#" -gt "1" ]; then
#WIP		for i in "${@: 2:$#}"; do
#WIP			if [[ "$i" != *" "* || ( " 0) EXIT $(trap -l) DEBUG RETURN " != *" $i "* && " 0) EXIT $(trap -l) DEBUG RETURN " != *" ($i "* ) ]]; then
#WIP				unalias trap
#WIP				trap "$@"    # It won't succeed
#WIP				alias trap="__dumy_trap"
#WIP				break
#WIP			fi
#WIP		done
#WIP	fi
#WIP}
